name: Deploy Spring Project

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      #ssh 연결 테스트
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"
      

      # 1️⃣ 저장소 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          java-package: jdk
          distribution: 'temurin'

      # 3️⃣ Gradle 실행 권한 부여
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 4️⃣ Gradle 빌드 (JAR 생성)
      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          PROD_MYSQL_HOSTNAME: ${{ secrets.PROD_MYSQL_HOSTNAME }}
          PROD_MYSQL_DB_NAME: ${{ secrets.PROD_MYSQL_DB_NAME }}
          PROD_MYSQL_DB_USERNAME: ${{ secrets.PROD_MYSQL_DB_USERNAME }}
          PROD_MYSQL_DB_PASSWORD: ${{ secrets.PROD_MYSQL_DB_PASSWORD }}

          PROD_MONGO_DB_HOST: ${{ secrets.PROD_MONGO_DB_HOST }}
          PROD_MONGO_DB_PASSWORD: ${{ secrets.PROD_MONGO_DB_PASSWORD }}
          PROD_MONGO_DB_NAME: ${{ secrets.PROD_MONGO_DB_NAME }}

          PROD_REDIS_HOST: ${{ secrets.PROD_REDIS_HOST }}
          PROD_REDIS_PORT: ${{ secrets.PROD_REDIS_PORT }}
          PROD_REDIS_PASSWORD: ${{ secrets.PROD_REDIS_PASSWORD }}

          PROD_JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}

          GOOGLE_EMAIL: ${{ secrets.GOOGLE_EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

      # ssh키 set up
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa  # SSH Private Key를 secrets에서 가져옴
          chmod 600 ~/.ssh/id_rsa  # 파일 권한 설정
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts  # 서버 호스트키 추가

      # 4. EC2 서버에 JAR 파일 업로드
      - name: Upload JAR to EC2
        run: |
          scp -i ~/.ssh/id_rsa build/libs/cornchat.jar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/ubuntu/spring-app/
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}

      # 5. EC2 서버에서 Spring Boot 애플리케이션 실행
      - name: Run Spring Boot on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /home/ubuntu/spring-app
            fuser -k 8080/tcp || true  # 기존 프로세스 종료 (Spring Boot 실행 중이라면)
            nohup java -jar cornchat.jar > app.log 2>&1 &
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}

      # 4. 서버에 배포
#      - name: Deploy to Server
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USER }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          port: ${{ secrets.SERVER_PORT }}
#          timeout: 120s # 연결 타임아웃을 60초로 설정
#          script: |
#            cd /home/user
#            ./stop.sh || true
#            cp build/libs/cornchat.jar ./cornchat.jar
#            nohup java -jar cornchat.jar &
#          debug: true # 디버그 활성화