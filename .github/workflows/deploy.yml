name: Deploy Spring Project

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 저장소 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          java-package: jdk
          distribution: 'temurin'

      # 3️⃣ Gradle 실행 권한 부여
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 4️⃣ Gradle 빌드 (JAR 생성)
      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          PROD_MYSQL_HOSTNAME: ${{ secrets.PROD_MYSQL_HOSTNAME }}
          PROD_MYSQL_DB_NAME: ${{ secrets.PROD_MYSQL_DB_NAME }}
          PROD_MYSQL_DB_USERNAME: ${{ secrets.PROD_MYSQL_DB_USERNAME }}
          PROD_MYSQL_DB_PASSWORD: ${{ secrets.PROD_MYSQL_DB_PASSWORD }}

          PROD_MONGO_DB_HOST: ${{ secrets.PROD_MONGO_DB_HOST }}
          PROD_MONGO_DB_PASSWORD: ${{ secrets.PROD_MONGO_DB_PASSWORD }}
          PROD_MONGO_DB_NAME: ${{ secrets.PROD_MONGO_DB_NAME }}

          PROD_REDIS_HOST: ${{ secrets.PROD_REDIS_HOST }}
          PROD_REDIS_PORT: ${{ secrets.PROD_REDIS_PORT }}
          PROD_REDIS_PASSWORD: ${{ secrets.PROD_REDIS_PASSWORD }}

          PROD_JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}

          GOOGLE_EMAIL: ${{ secrets.GOOGLE_EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

      # 5️⃣ EC2 서버에 JAR 파일 업로드
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "build/libs/*.jar"
          target: "/home/ubuntu/"

      # 6️⃣ EC2에서 실행 (기존 프로세스 종료 후 새로운 JAR 실행)
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          timeout: 120s
          script: |
            cd /home/ubuntu

            # 기존 프로세스 종료 (실행 중인 Java 프로세스 찾기 후 종료)
            PID=$(pgrep -f 'cornchat.jar')
            if [ ! -z "$PID" ]; then
              echo "Stopping existing process: $PID"
              kill -9 $PID
            fi
            
            # JAR 파일 이름을 자동으로 설정 (가장 최신 빌드된 파일 선택)
            JAR_FILE=$(ls -t build/libs/*.jar | head -n 1)
            echo "Deploying $JAR_FILE"

            # 기존 JAR 파일 백업 및 새로운 JAR 배포
            mv $JAR_FILE cornchat.jar

            # 환경 변수 설정 및 실행
            export SPRING_PROFILES_ACTIVE=prod
            nohup java -jar cornchat.jar > app.log 2>&1 &